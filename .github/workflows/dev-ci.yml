name: dev CI Workflow

on:
  push:
    branches:
      - dev  # dev 브랜치에 푸시될 때 실행
  pull_request:
    branches:
      - dev  # dev 브랜치에 대한 PR 생성 시 실행

jobs:

  build-and-test:
    name: 빌드 및 테스트
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DEV_DB_PASS }}
          MYSQL_DATABASE: ${{ secrets.DEV_DB_NAME }}
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306
      redis:
        image: redis:6.2
        ports:
          - 6379:6379
    steps:
      # Step 1: 코드 체크아웃
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      # Step 2: Gradle Wrapper 실행 권한 부여
      - name: Gradle Wrapper 실행 권한 부여
        run: chmod +x ./gradlew

      # Step 3: Gradle 의존성 캐시
      - name: Gradle 의존성 캐시
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches/modules-2/files-2.1
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle

      # Step 4: JDK 설정
      - name: JDK 설정
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 5: yml 생성
      - name: yml 파일 생성
        run: |
          echo "${{ secrets.ACTIVE_DEV }}" > ./src/main/resources/application.yml
        shell: bash

      # Step 6: dev.yml 생성
      - name: dev.yml 파일 생성
        run: |
          echo "${{ secrets.APPLICATION_DEV_YML }}" > ./src/main/resources/application-dev.yml
        shell: bash

      # Step 7: env 생성
      - name: env 파일 생성
        run: |
          echo "${{ secrets.ENV_DEV }}" > ./.env.dev
        shell: bash

      # Step 8: Gradle 빌드 및 테스트 실행
      - name: Gradle 빌드, 테스트 및 JaCoCo 실행
        run: ./gradlew clean build jacocoTestReport --no-daemon --build-cache

      # Step 9: JaCoCo 커버리지 리포트 저장
      - name: JaCoCo 커버리지 리포트 저장
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: jacoco-reports
          path: build/reports/jacoco/test/html/**

  checkstyle:
    name: Checkstyle 검사
    runs-on: ubuntu-latest
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: JDK 설정
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle Wrapper 실행 권한 부여
        run: chmod +x ./gradlew

      - name: Checkstyle 실행
        run: ./gradlew clean checkstyleMain --no-daemon --build-cache

      - name: Checkstyle HTML 보고서 저장
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: checkstyle-html-report
          path: build/reports/checkstyle/checkstyleMain.html

      - name: Checkstyle 위반 확인
        run: |
          violations=$(grep -c '<error ' build/reports/checkstyle/checkstyleMain.xml || true)
          echo "Found $violations Checkstyle violations."
          if [ "$violations" -gt 0 ]; then
            echo "Checkstyle violations found: $violations"
            exit 1
          else
            echo "No Checkstyle violations found."
          fi
