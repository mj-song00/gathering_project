plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'checkstyle'
    id 'jacoco'
}

group = 'com.sparta'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {

    // hibernate
    implementation group: 'org.hibernate', name: 'hibernate-spatial', version: '6.2.5.Final'

    // spring boot
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // spring devtools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // spring security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // OAuth2 Client
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // h2
    runtimeOnly 'com.h2database:h2'

    // mysql
    runtimeOnly 'com.mysql:mysql-connector-j'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // bcrypt
    implementation 'at.favre.lib:bcrypt:0.10.2'

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

    // AWS SDK
    implementation platform('software.amazon.awssdk:bom:2.29.2')
    implementation 'software.amazon.awssdk:sqs'
    implementation 'software.amazon.awssdk:s3'

    // JUnit 5
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'

    // Spring WebSocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    //redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // webflux
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // mail
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // Spring Batch
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.batch:spring-batch-core'
    implementation 'org.springframework.batch:spring-batch-infrastructure'

    // mac os
    implementation 'io.netty:netty-resolver-dns-native-macos:4.1.96.Final:osx-aarch_64'

    // embedded Redis
    implementation group: 'it.ozimov', name: 'embedded-redis', version: '0.7.1'

    // Redisson
    implementation 'org.redisson:redisson-spring-boot-starter:3.39.0'
}

jacoco {
    toolVersion = "0.8.10"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}

checkstyle {
    toolVersion = '10.3.4'
    configFile = file('src/main/resources/checkstyle/checkstyle.xml')
    ignoreFailures = true
    showViolations = true
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = true
        html.required = true
        xml.outputLocation = file("build/reports/checkstyle/checkstyleMain.xml")
        html.outputLocation = file("build/reports/checkstyle/checkstyleMain.html")
    }
}

import groovy.xml.XmlSlurper

tasks.register('checkstyleFailOnViolation') {
    dependsOn 'checkstyleMain'
    doLast {
        def reportFile = file("build/reports/checkstyle/checkstyleMain.xml")
        if (reportFile.exists()) {
            def checkstyleReport = new XmlSlurper().parse(reportFile)
            def violations = checkstyleReport.'**'.findAll { it.name() == 'error' }
            if (violations.size() > 0) {
                throw new GradleException("Checkstyle violations were found. Please fix them.")
            } else {
                println "No Checkstyle violations found."
            }
        } else {
            println "Checkstyle report not found."
        }
    }
}

tasks.test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // 테스트가 끝나면 Report 생성
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        showStandardStreams = true // 테스트 출력 디버깅에 유용
    }
}

tasks.build.dependsOn 'checkstyleFailOnViolation'

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-Xlint:deprecation']
}
